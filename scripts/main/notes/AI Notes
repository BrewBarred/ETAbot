🔹 Workflow idea

Bot detects a new NPC → checks if it exists in your enum source file.

If not, it writes a new enum constant (in the right format) into the .java file.

Your external script (watcher) sees that the file changed, runs:

javac src/main/java/.../NpcEnum.java
java -cp out my.bot.Main


Your bot now starts again, but with the updated enum baked in.

🔹 Example enum file (before learning)
public enum NpcEnum {
    GOBLIN,
    COW;
}

🔹 Bot discovers a new NPC ("Chicken")

Bot opens NpcEnum.java, finds the last enum constant (COW;), and replaces the ; with , CHICKEN;.

Resulting file:

public enum NpcEnum {
    GOBLIN,
    COW,
    CHICKEN;
}

🔹 Java code snippet to auto-append
import java.io.*;
import java.nio.file.*;

public class NpcEnumUpdater {
    private static final Path ENUM_FILE = Paths.get("src/main/java/my/bot/NpcEnum.java");

    public static void addNpc(String npcName) throws IOException {
        String enumCode = Files.readString(ENUM_FILE);
        String upper = npcName.toUpperCase().replace(" ", "_");

        if (enumCode.contains(upper)) {
            return; // already exists
        }

        // replace the last semicolon with new entry
        String updated = enumCode.replaceFirst(";", ", " + upper + ";");

        Files.writeString(ENUM_FILE, updated);
        System.out.println("Added NPC to enum: " + upper);
    }
}

🔹 External script (bash example)
#!/bin/bash
while true; do
  inotifywait -e close_write src/main/java/my/bot/NpcEnum.java
  echo "Detected change, recompiling..."
  javac -d out $(find src/main/java -name "*.java")
  java -cp out my.bot.Main
done


This keeps looping: whenever your bot writes new NPCs to the enum, the watcher script recompiles and reruns automatically.

⚡ That’s basically live code evolution:

Java bot detects new data.

Writes source.

External script recompiles.

Fresh run has “learned” constants baked into bytecode.